CREATE TABLE T_USER 
(
  ID INT NOT NULL 
, FIRST_NAME VARCHAR2(60) 
, LAST_NAME VARCHAR2(60) 
, USERNAME VARCHAR2(60) NOT NULL 
, PASSWORD VARCHAR2(60) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, UPDATED_DATE DATE 
, LAST_PASSWORD_CHANGE DATE 
, SHOW_PASSWORD_CHANGE VARCHAR2(20) 
, CONSTRAINT T_USER_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);



ALTER TABLE T_USER
ADD CONSTRAINT T_USER_UK1 UNIQUE 
(
  USERNAME 
)
ENABLE;

CREATE SEQUENCE T_USER_SEQ;

CREATE TRIGGER T_USER_TRG 
BEFORE INSERT ON T_USER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT T_USER_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

-- t_group

 CREATE TABLE T_GROUP 
(
  ID INT NOT NULL 
, GROUP_NAME VARCHAR2(60) NOT NULL 
, GROUP_DESCRIPTION VARCHAR2(60) NOT NULL 
, CONSTRAINT T_GROUP_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

ALTER TABLE T_GROUP
ADD CONSTRAINT T_GROUP_UK1 UNIQUE 
(
  GROUP_NAME 
)
ENABLE;

CREATE SEQUENCE T_GROUP_SEQ2;

CREATE TRIGGER T_GROUP_TRG 
BEFORE INSERT ON T_GROUP 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.GROUP_DESCRIPTION IS NULL THEN
      SELECT T_GROUP_SEQ2.NEXTVAL INTO :NEW.GROUP_DESCRIPTION FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


-- t_user_group
ALTER TABLE T_USER_GROUP 
DROP CONSTRAINT T_USER_GROUP_FK1;

ALTER TABLE T_USER_GROUP 
DROP CONSTRAINT T_USER_GROUP_PK;

ALTER TABLE T_USER_GROUP
ADD CONSTRAINT T_USER_GROUP_PK PRIMARY KEY 
(
  ID 
, USER_ID 
, GROUP_ID 
)
ENABLE;

ALTER TABLE T_USER_GROUP
ADD CONSTRAINT T_USER_GROUP_FK2 FOREIGN KEY
(
  USER_ID 
)
REFERENCES T_USER
(
  ID 
)
ENABLE;

ALTER TABLE T_USER_GROUP
ADD CONSTRAINT T_USER_GROUP_FK3 FOREIGN KEY
(
  GROUP_ID 
)
REFERENCES T_GROUP
(
  ID 
)
ENABLE;

CREATE SEQUENCE T_USER_GROUP_SEQ1;
CREATE TRIGGER T_USER_GROUP_TRG 
BEFORE INSERT ON T_USER_GROUP 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.USER_ID IS NULL THEN
      SELECT T_USER_GROUP_SEQ1.NEXTVAL INTO :NEW.USER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

--t_privillages
CREATE TABLE T_PRIVILLAGE 
(
  ID INT NOT NULL 
, RESOURCES VARCHAR2(60) 
, GROUP_ID INT NOT NULL 
, CONSTRAINT T_PRIVILLAGE_PK PRIMARY KEY 
  (
    ID 
  , GROUP_ID 
  )
  ENABLE 
);

ALTER TABLE T_PRIVILLAGE
ADD CONSTRAINT T_PRIVILLAGE_FK1 FOREIGN KEY
(
  GROUP_ID 
)
REFERENCES T_GROUP
(
  ID 
)
ENABLE;

CREATE SEQUENCE T_PRIVILLAGE_SEQ;

CREATE TRIGGER T_PRIVILLAGE_TRG 
BEFORE INSERT ON T_PRIVILLAGE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.GROUP_ID IS NULL THEN
      SELECT T_PRIVILLAGE_SEQ.NEXTVAL INTO :NEW.GROUP_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

---t_parser
CREATE TABLE T_PARSER 
(
  ID INT NOT NULL 
, FILE_NAME VARCHAR2(60) NOT NULL 
, CLIENT_NAME VARCHAR2(60) NOT NULL 
, PARSER_NAME VARCHAR2(60) NOT NULL 
, VENDOR_NAME VARCHAR2(60) NOT NULL 
, XML_NAME VARCHAR2(60) NOT NULL 
, FILE_LOCATION VARCHAR2(60) NOT NULL 
, CONSTRAINT T_PARSER_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

ALTER TABLE T_PARSER
ADD CONSTRAINT T_PARSER_UK1 UNIQUE 
(
  FILE_NAME 
, PARSER_NAME 
, XML_NAME 
)
ENABLE;

--t_parser_request

CREATE TABLE T_PARSER_REQUEST 
(
  ID INT NOT NULL 
, FILE_NAME VARCHAR2(60) NOT NULL 
, CLIENT_NAME VARCHAR2(60) NOT NULL 
, VENDOR_NAME VARCHAR2(60) NOT NULL 
, FILE_LOCATION VARCHAR2(60) NOT NULL 
, STATUS VARCHAR2(60) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, UPDATED_DATE DATE NOT NULL 
, CONSTRAINT T_PARSER_REQUEST_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

ALTER TABLE T_PARSER_REQUEST
ADD CONSTRAINT T_PARSER_REQUEST_UK1 UNIQUE 
(
  FILE_NAME 
)
ENABLE;

--t_configuration

CREATE TABLE T_CONFIGURATION 
(
  ID INT NOT NULL 
, CONFIGURATION_KEY VARCHAR2(60) NOT NULL 
, CONFIGURATION_VALUE VARCHAR2(60) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, UPDATED_DATE DATE NOT NULL 
, CONSTRAINT T_CONFIGURATION_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);




-- 
INSERT INTO T_USER (FIRST_NAME, LAST_NAME, USERNAME, PASSWORD, CREATED_DATE) VALUES ('admin', 'admin', 'admin', 'admin', '25-MAY-18');
-- insert into t_parser()
